Using Java 8 Streams
Programming Projects:
 1) A Student Stream
  Start Eclipse and create a new Java project called ‘lab8’
  Download the associated Student.java and Driver.java files
(also shown below)
  Add those two files to the project you have created, and
ensure you can execute the driver class. (output should be
shown in the console).
  Using the Streams API complete the following tasks within the
main() method of the Driver class
1. Create a Stream from the students List, which uses the
forEach() terminal method to print information about each
student to the console. Note: the Student class has a
toString() method so can be passed directly to the
System.out.println method.
 2. Create a Stream from the student list which filters the
stream to only students which have a grade of over 70%, then
uses the forEach() terminal method to print information
about each remaining student.
 3. Create a Stream from the student list which uses map() to
change each Student object into a student name (String)
value. The name should always be uppercase, then sorted
alphabetically. Collect the results into an array called
‘studentArray’ then print the array content using a command
such as –
Object []  studentArray = …stream methods
 System.out.println(Arrays.toString(studentArray));
 4. Create a Stream from the student list which uses
mapToDouble() to create a specialized DoubleStream. Then
call a method on that DoubleStream to calculate the average
grade for all students. Finally call
getAsDouble() to access
and store the result in a variable called ‘aveGrade’ and
print to the console.
2) Generated Streams
  Using the Streams API complete the following tasks within the
main() method of the Driver class
1. Use the IntStream.range() method to create a stream of
integers from 90 to 100. Map each element of the stream into
the cubed version of the number then output to the console
using a call to the forEach() terminal method.
 2. Use the Stream.generate() method to create an infinite stream
of random numbers, map() these to the range 0 to 5 and ensure
they are integers. Hint: use a Lambda expression such as
n -> (int)(n * 5 + 1)
 Now use the limit() intermediate function to ensure only 10
values are generated. Collect the values into a List of
integer values, then display the list using a traditional for
loop, e.g.
 List<Integer> numList = …stream methods
 for(int next : numList)
 System.out.println("Next value is : " + next);
 3. What additional intermediate method could be added to the
above statement to ensure any duplicate values were removed
from the resultant collection? Add this to the solution.
/**
 * A student class for storing overall grades.
 */
 public class Student {
 /**
 * The student ID
 */
 private int id;
 /**
 * The student's name
 */
 private String name;
 /**
 * The student’s overall grade.
 */
 private float grade;
 /**
 * @return the student ID
 */
 public int getID() {
 return id;
 }
 /**
 * @return the student's name
 */
 public String getName() {
 return name;
 }
 /**
 * @return the student’s overall grade.
 */
 public float getGrade() {
 return grade;
 }
 public String toString() {
 return id + " Name : '" + name + "' Grade: " + grade;
 }
 /**
 * Constructor
 * @param id
 * @param name
 * @param grade
 */
 public Student(int id, String name, float grade) {
 this.id = id;
 this.name = name;
 this.grade = grade;
 }
 }
import java.util.ArrayList;
 import java.util.List;
 public class Driver {
 public static void main(String[] args) {
 List<Student> students = new ArrayList<Student>();
 students.add(new Student(1, "JJ. Jognson", 38));
 students.add(new Student(2, "P. Tibbs", 48));
 students.add(new Student(3, "W. Major", 28));
 students.add(new Student(4, "P. Turner", 60));
 students.add(new Student(5, "A. Ball", 20));
 students.add(new Student(6, "B. Smithy", 90));
 students.add(new Student(7, "R. Jules", 71));
 students.add(new Student(8, "T. Verne", 97));
 // create your Stream solutions here
 }
 }